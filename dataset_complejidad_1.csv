code,O,Omega,Theta
a  =  b  +  c,O(1),O(1),O(1)
def devolver(): return 10,O(1),O(1),O(1)
def devolver(): return 10,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
a = b + c,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
x  =  1,O(1),O(1),O(1)
def devolver(): return 10,O(1),O(1),O(1)
x = 1,O(1),O(1),O(1)
a  =  b  +  c,O(1),O(1),O(1)
x  =  1,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
x  =  1,O(1),O(1),O(1)
a  =  b  +  c,O(1),O(1),O(1)
x  =  1,O(1),O(1),O(1)
a = b + c,O(1),O(1),O(1)
a = b + c,O(1),O(1),O(1)
x  =  1,O(1),O(1),O(1)
x = 1,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
def devolver(): return 10,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
x = 1,O(1),O(1),O(1)
def devolver(): return 10,O(1),O(1),O(1)
a  =  b  +  c,O(1),O(1),O(1)
a = b + c,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
x  =  1,O(1),O(1),O(1)
x = 1,O(1),O(1),O(1)
x  =  1,O(1),O(1),O(1)
x  =  1,O(1),O(1),O(1)
def devolver(): return 10,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
a = b + c,O(1),O(1),O(1)
x  =  1,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
def devolver(): return 10,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
a  =  b  +  c,O(1),O(1),O(1)
x = 1,O(1),O(1),O(1)
def devolver(): return 10,O(1),O(1),O(1)
a  =  b  +  c,O(1),O(1),O(1)
x = 1,O(1),O(1),O(1)
x = 1,O(1),O(1),O(1)
a  =  b  +  c,O(1),O(1),O(1)
x  =  1,O(1),O(1),O(1)
x = 1,O(1),O(1),O(1)
x  =  1,O(1),O(1),O(1)
a  =  b  +  c,O(1),O(1),O(1)
x  =  1,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
a  =  b  +  c,O(1),O(1),O(1)
def devolver(): return 10,O(1),O(1),O(1)
def devolver(): return 10,O(1),O(1),O(1)
def devolver(): return 10,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
a  =  b  +  c,O(1),O(1),O(1)
x = 1,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
x = 1,O(1),O(1),O(1)
x  =  1,O(1),O(1),O(1)
a  =  b  +  c,O(1),O(1),O(1)
a  =  b  +  c,O(1),O(1),O(1)
x = 1,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
x = 1,O(1),O(1),O(1)
x  =  1,O(1),O(1),O(1)
a  =  b  +  c,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
a = b + c,O(1),O(1),O(1)
a = b + c,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
a  =  b  +  c,O(1),O(1),O(1)
a = b + c,O(1),O(1),O(1)
a  =  b  +  c,O(1),O(1),O(1)
a  =  b  +  c,O(1),O(1),O(1)
a  =  b  +  c,O(1),O(1),O(1)
def devolver(): return 10,O(1),O(1),O(1)
a = b + c,O(1),O(1),O(1)
def devolver(): return 10,O(1),O(1),O(1)
def devolver(): return 10,O(1),O(1),O(1)
x = 1,O(1),O(1),O(1)
x = 1,O(1),O(1),O(1)
x = 1,O(1),O(1),O(1)
x  =  1,O(1),O(1),O(1)
def devolver(): return 10,O(1),O(1),O(1)
a = b + c,O(1),O(1),O(1)
x  =  1,O(1),O(1),O(1)
a = b + c,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
a = b + c,O(1),O(1),O(1)
x  =  1,O(1),O(1),O(1)
a  =  b  +  c,O(1),O(1),O(1)
x  =  1,O(1),O(1),O(1)
a = b + c,O(1),O(1),O(1)
def  devolver():  return  10,O(1),O(1),O(1)
x = 1,O(1),O(1),O(1)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def  buscar(lista,  objetivo):
  for  i  in  range(len(lista)):
    if  lista[i]  ==  objetivo:
      return  i
  return  -1",O(n),O(1),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def buscar(lista, objetivo):
 for i in range(len(lista)):
  if lista[i] == objetivo:
   return i
 return -1",O(n),O(1),O(n)
"def  imprimir_todos(lista):
  for  item  in  lista:
    print(item)",O(n),O(n),O(n)
"def imprimir_todos(lista):
 for item in lista:
  print(item)",O(n),O(n),O(n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def busqueda_binaria(arr, x):
 low, high = 0, len(arr)-1
 while low <= high:
  mid = (low + high) // 2
  if arr[mid] == x:
   return mid
  elif arr[mid] < x:
   low = mid + 1
  else:
   high = mid - 1",O(log n),O(1),O(log n)
"def  busqueda_binaria(arr,  x):
  low,  high  =  0,  len(arr)-1
  while  low  <=  high:
    mid  =  (low  +  high)  //  2
    if  arr[mid]  ==  x:
      return  mid
    elif  arr[mid]  <  x:
      low  =  mid  +  1
    else:
      high  =  mid  -  1",O(log n),O(1),O(log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  merge_sort(arr):
  if  len(arr)  >  1:
    mid  =  len(arr)//2
    L  =  arr[:mid]
    R  =  arr[mid:]
    merge_sort(L)
    merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def merge_sort(arr):
 if len(arr) > 1:
  mid = len(arr)//2
  L = arr[:mid]
  R = arr[mid:]
  merge_sort(L)
  merge_sort(R)",O(n log n),O(n log n),O(n log n)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  print(i, j)",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"def  burbuja(arr):
  for  i  in  range(len(arr)):
    for  j  in  range(len(arr)-1):
      if  arr[j]>arr[j+1]:
        arr[j],  arr[j+1]  =  arr[j+1],  arr[j]",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"for  i  in  range(n):
  for  j  in  range(n):
    print(i,  j)",O(n^2),O(n),O(n^2)
"def burbuja(arr):
 for i in range(len(arr)):
  for j in range(len(arr)-1):
   if arr[j]>arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]",O(n^2),O(n),O(n^2)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for i in range(n):
 for j in range(n):
  for k in range(n):
   print(i, j, k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"for  i  in  range(n):
  for  j  in  range(n):
    for  k  in  range(n):
      print(i,  j,  k)",O(n^3),O(n^2),O(n^3)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def  fibonacci(n):
  if  n  <=  1:
    return  n
  return  fibonacci(n-1)  +  fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def fibonacci(n):
 if n <= 1:
  return n
 return fibonacci(n-1) + fibonacci(n-2)",O(2^n),O(2^n),O(2^n)
"def  subconjuntos(nums,  i=0,  path=[]):
  if  i  ==  len(nums):
    return
  subconjuntos(nums,  i+1,  path+[nums[i]])
  subconjuntos(nums,  i+1,  path)",O(2^n),O(2^n),O(2^n)
"def subconjuntos(nums, i=0, path=[]):
 if i == len(nums):
  return
 subconjuntos(nums, i+1, path+[nums[i]])
 subconjuntos(nums, i+1, path)",O(2^n),O(2^n),O(2^n)
